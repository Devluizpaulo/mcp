/**
 * @fileoverview Firestore Security Rules for TechUpgrade Pro.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user data and configurations,
 * while allowing public read access to component and peripheral data.
 *
 * Data Structure:
 * - /components/{componentId}: Public collection of hardware components.
 * - /peripherals/{peripheralId}: Public collection of peripheral devices.
 * - /users/{userId}: Collection of user profiles, accessible only by the user themselves.
 * - /users/{userId}/configurations/{configId}: Collection of user-specific configurations,
 *   accessible only by the owning user.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user document.
 * - Users can only read, create, update, and delete their own configurations.
 * - Components and peripherals are publicly readable and writable. Rate limiting should be considered.
 *
 * Denormalization for Authorization:
 * The UserConfiguration entity has a `userId` field that MUST match the path `/users/{userId}`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read and write access to component data. Rate limiting should be considered.
     * @path /components/{componentId}
     * @allow (get, list) Public access to read any component.
     * @allow (create, update, delete) Any authenticated user can create, update, or delete a component.
     * @deny None.
     * @principle Public read/write access with potential rate limiting.
     */
    match /components/{componentId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows public read and write access to peripheral data. Rate limiting should be considered.
     * @path /peripherals/{peripheralId}
     * @allow (get, list) Public access to read any peripheral.
     * @allow (create, update, delete) Any authenticated user can create, update, or delete a peripheral.
     * @deny None.
     * @principle Public read/write access with potential rate limiting.
     */
    match /peripherals/{peripheralId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows a user to read and write their own user document.
     * @path /users/{userId}
     * @allow (get) User with ID 'user123' can read their own profile.
     * @allow (create) User with ID 'user123' can create their own profile.
     * @allow (update) User with ID 'user123' can update their own profile.
     * @allow (delete) User with ID 'user123' can delete their own profile.
     * @deny (get) User with ID 'user456' cannot read user 'user123's profile.
     * @deny (create) User with ID 'user456' cannot create user 'user123's profile.
     * @deny (update) User with ID 'user456' cannot update user 'user123's profile.
     * @deny (delete) User with ID 'user456' cannot delete user 'user123's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own configurations.
     * @path /users/{userId}/configurations/{configId}
     * @allow (get) User with ID 'user123' can read their own configuration 'config456'.
     * @allow (create) User with ID 'user123' can create a configuration under their ID.
     * @allow (update) User with ID 'user123' can update their own configuration 'config456'.
     * @allow (delete) User with ID 'user123' can delete their own configuration 'config456'.
     * @deny (get) User with ID 'user456' cannot read configuration 'config456' under user 'user123'.
     * @deny (create) User with ID 'user456' cannot create a configuration under user 'user123'.
     * @deny (update) User with ID 'user456' cannot update configuration 'config456' under user 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete configuration 'config456' under user 'user123'.
     * @principle Enforces document ownership for user configurations.
     */
    match /users/{userId}/configurations/{configId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

  }

  // Helper functions

  /**
   * @description Checks if the user is signed in.
   * @return {boolean} True if the user is signed in, false otherwise.
   */
  function isSignedIn() {
    return request.auth != null;
  }

  /**
   * @description Checks if the authenticated user is the owner of the resource.
   * @param {string} userId The user ID to compare against the authenticated user's ID.
   * @return {boolean} True if the user is the owner, false otherwise.
   */
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    /**
   * @description Checks if the authenticated user is the owner of the resource, and the resource exists.
   * @param {string} userId The user ID to compare against the authenticated user's ID.
   * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
   */
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}