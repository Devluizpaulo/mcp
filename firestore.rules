/**
 * @file Firestore Security Rules for TechUpgrade Pro
 * @version Prototyping Mode - Data shape is not strictly validated.
 *
 * @description This ruleset enforces a user-ownership model for user data and allows public read access to components and peripherals.
 *
 * @dataStructure
 *  - /components/{componentId}: Public collection for hardware components.
 *  - /peripherals/{peripheralId}: Public collection for peripheral devices.
 *  - /users/{userId}: Private collection for user profiles, accessible only to the user themselves.
 *  - /users/{userId}/configurations/{configId}: Private collection for user configurations, accessible only to the user who owns the configuration.
 *
 * @keySecurityDecisions
 *  - Components and peripherals are publicly readable but should have write access limited (e.g., via Cloud Functions with admin privileges).
 *  - Users can only read and write their own user document.
 *  - User configurations are owned by the user and stored under their user document.
 *  - Listing of components and peripherals is public.
 *  - Listing of user configurations is restricted to the owner.
 *  - User listing is denied to prevent information disclosure.
 *
 * @denormalizationForAuthorization
 *  - Ownership is enforced via path-based rules (e.g., /users/{userId}).  No denormalization is required.
 *
 * @structuralSegregation
 *  - User data and public data (components, peripherals) are stored in separate top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to component data and restricts write access.
     * @path /components/{componentId}
     * @allow (get, list): Any user can read component data.
     * @deny (create, update, delete): No user can create, update, or delete component data directly.
     * @principle Public read, restricted write.
     */
    match /components/{componentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to peripheral data and restricts write access.
     * @path /peripherals/{peripheralId}
     * @allow (get, list): Any user can read peripheral data.
     * @deny (create, update, delete): No user can create, update, or delete peripheral data directly.
     * @principle Public read, restricted write.
     */
    match /peripherals/{peripheralId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows users to read and write their own user document.
     * @path /users/{userId}
     * @allow (get, update, delete): User with ID userId can get, update and delete their own document.
     * @allow (create): User can create their own document if the userId matches their auth.uid.
     * @deny (list): No user can list all user documents.
     * @deny (create, update, delete): User cannot modify a document with a different userId.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own configurations.
     * @path /users/{userId}/configurations/{configId}
     * @allow (get, list, create, update, delete): User can manage configurations under their own user ID.
     * @deny (get, list, create, update, delete): User cannot manage configurations under a different user ID.
     * @principle Enforces document ownership for writes within a user-specific subcollection.
     */
    match /users/{userId}/configurations/{configId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    // --- Helper functions ---

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param userId The user ID to compare with the request's authentication UID.
     * @return True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of the resource, and that the resource exists.
     * @param userId The user ID to compare with the request's authentication UID.
     * @return True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}