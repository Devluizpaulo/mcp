/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user data and configurations,
 *              while allowing public read access to component and peripheral data.
 *
 * Data Structure:
 * - /components/{componentId}: Public collection of hardware components.
 * - /peripherals/{peripheralId}: Public collection of peripheral devices.
 * - /users/{userId}: Stores individual user profiles, accessible only by the user.
 * - /users/{userId}/configurations/{configId}: Stores user-specific configurations, accessible only by the user.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Components and Peripherals are publicly readable, but write access should be rate-limited in the application.
 * - All writes to user-owned data are strictly validated against the authenticated user's ID.
 *
 * Denormalization for Authorization:
 * - UserConfigurations are stored as subcollections of user documents, enabling path-based authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to hardware components, but restricts writes.
     * @path /components/{componentId}
     * @allow get, list: Any user can read component data.
     * @allow create, update, delete: No direct write access is allowed through security rules. Writes must be handled via trusted backend.
     * @deny create, update, delete: Unauthorized users cannot create, update, or delete components.
     * @principle Allows public read access with restricted writes.
     */
    match /components/{componentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access to peripheral devices, but restricts writes.
     * @path /peripherals/{peripheralId}
     * @allow get, list: Any user can read peripheral data.
     * @allow create, update, delete: No direct write access is allowed through security rules. Writes must be handled via trusted backend.
     * @deny create, update, delete: Unauthorized users cannot create, update, or delete peripherals.
     * @principle Allows public read access with restricted writes.
     */
    match /peripherals/{peripheralId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Restricts access to user documents to the authenticated user.
     * @path /users/{userId}
     * @allow get: The user can read their own profile data.
     * @allow create: The user can create their own profile (self-registration).
     * @allow update: The user can update their own profile data.
     * @allow delete: The user can delete their own profile.
     * @deny get: Another user attempts to read a different user's profile.
     * @deny create: A different user attempts to create a profile with a mismatched ID.
     * @deny update: Another user attempts to update a different user's profile.
     * @deny delete: Another user attempts to delete a different user's profile.
     * @principle Enforces strict user-ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to user configurations to the authenticated user.
     * @path /users/{userId}/configurations/{configId}
     * @allow get, list: The user can read and list their own configurations.
     * @allow create: The user can create configurations under their own user ID.
     * @allow update: The user can update their own configurations.
     * @allow delete: The user can delete their own configurations.
     * @deny get: Another user attempts to read a different user's configurations.
     * @deny create: A different user attempts to create a configuration with a mismatched user ID.
     * @deny update: Another user attempts to update a different user's configurations.
     * @deny delete: Another user attempts to delete a different user's configurations.
     * @principle Enforces strict user-ownership for user configurations.
     */
    match /users/{userId}/configurations/{configId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }

  // ----- Helper Functions -----

  // Checks if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Checks if the authenticated user's ID matches the provided user ID.
  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

    // Checks if the authenticated user's ID matches the provided user ID AND the resource exists.
  function isExistingOwner(userId) {
    return isSignedIn() && request.auth.uid == userId && resource != null;
  }
}